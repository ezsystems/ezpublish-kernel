parameters:
    # Intention string used by the CSRF protection in REST context.
    ezpublish_rest.csrf_token_intention: rest

    # URI part that all REST routes begin with. By this a REST request is recognized.
    ezpublish_rest.path_prefix: /api/ezp/v2

    ezsettings.default.rest_root_resources:
        content:
            mediaType: ''
            href: 'router.generate("ezpublish_rest_createContent")'
        contentByRemoteId:
            mediaType: ''
            href: 'templateRouter.generate("ezpublish_rest_redirectContent", {remoteId: "{remoteId}"})'
        contentTypes:
            mediaType: 'ContentTypeInfoList'
            href: 'router.generate("ezpublish_rest_listContentTypes")'
        contentTypeByIdentifier:
            mediaType: ''
            href: 'templateRouter.generate("ezpublish_rest_listContentTypes", {identifier: "{identifier}"})'
        contentTypeGroups:
            mediaType: 'ContentTypeGroupList'
            href: 'router.generate("ezpublish_rest_createContentTypeGroup")'
        contentTypeGroupByIdentifier:
            mediaType: ''
            href: 'templateRouter.generate("ezpublish_rest_loadContentTypeGroupList", {identifier: "{identifier}"})'
        users:
            mediaType: 'UserRefList'
            href: 'router.generate("ezpublish_rest_loadUsers")'
        usersByRoleId:
            mediaType: 'UserRefList'
            href: 'templateRouter.generate("ezpublish_rest_loadUsers", {roleId: "{roleId}"})'
        usersByRemoteId:
            mediaType: 'UserRefList'
            href: 'templateRouter.generate("ezpublish_rest_loadUsers", {remoteId: "{remoteId}"})'
        usersByEmail:
            mediaType: 'UserRefList'
            href: 'templateRouter.generate("ezpublish_rest_loadUsers", {email: "{email}"})'
        usersByLogin:
            mediaType: 'UserRefList'
            href: 'templateRouter.generate("ezpublish_rest_loadUsers", {login: "{login}"})'
        roles:
            mediaType: 'RoleList'
            href: 'router.generate("ezpublish_rest_listRoles")'
        rootLocation:
            mediaType: 'Location'
            href: 'router.generate("ezpublish_rest_loadLocation", {locationPath: "1/2"})'
        rootUserGroup:
            mediaType: 'UserGroup'
            href: 'router.generate("ezpublish_rest_loadUserGroup", {groupPath: "1/5"})'
        rootMediaFolder:
            mediaType: 'Location'
            href: 'router.generate("ezpublish_rest_loadLocation", {locationPath: "1/43"})'
        locationByRemoteId:
            mediaType: ''
            href: 'templateRouter.generate("ezpublish_rest_redirectLocation", {remoteId: "{remoteId}"})'
        locationByPath:
            mediaType: ''
            href: 'templateRouter.generate("ezpublish_rest_redirectLocation", {locationPath: "{locationPath}"})'
        trash:
            mediaType: 'Trash'
            href: 'router.generate("ezpublish_rest_loadTrashItems")'
        sections:
            mediaType: 'SectionList'
            href: 'router.generate("ezpublish_rest_listSections")'
        views:
            mediaType: 'RefList'
            href: 'router.generate("ezpublish_rest_views_create")'
        objectStateGroups:
            mediaType: 'ObjectStateGroupList'
            href: 'router.generate("ezpublish_rest_loadObjectStateGroups")'
        objectStates:
            mediaType: 'ObjectStateList'
            href: 'templateRouter.generate("ezpublish_rest_loadObjectStates", {objectStateGroupId: "{objectStateGroupId}"})'
        globalUrlAliases:
            mediaType: 'UrlAliasRefList'
            href: 'router.generate("ezpublish_rest_listGlobalURLAliases")'
        urlWildcards:
            mediaType: 'UrlWildcardList'
            href: 'router.generate("ezpublish_rest_listURLWildcards")'
        createSession:
            mediaType: 'UserSession'
            href: 'router.generate("ezpublish_rest_createSession")'
        refreshSession:
            mediaType: 'UserSession'
            href: 'templateRouter.generate("ezpublish_rest_refreshSession", {sessionId: "{sessionId}"})'
