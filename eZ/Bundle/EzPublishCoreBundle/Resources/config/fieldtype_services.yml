services:
    # Parameter providers
    ezpublish.fieldType.parameterProviderRegistry:
        class: eZ\Publish\Core\MVC\Symfony\FieldType\View\ParameterProviderRegistry

    ezpublish.fieldType.ezdatetime.parameterProvider:
        class: eZ\Publish\Core\MVC\Symfony\FieldType\View\ParameterProvider\LocaleParameterProvider
        arguments: ["@ezpublish.locale.converter"]
        calls:
            - [setRequestStack, ["@request_stack"]]
        tags:
            - {name: ezplatform.field_type.parameter_provider, alias: ezdatetime}
            - {name: ezplatform.field_type.parameter_provider, alias: ezdate}
            - {name: ezplatform.field_type.parameter_provider, alias: eztime}

    ezpublish.fieldType.ezobjectrelation.parameterProvider:
        class: eZ\Publish\Core\MVC\Symfony\FieldType\Relation\ParameterProvider
        arguments:
            - "@ezpublish.api.service.content"
        tags:
            - {name: ezplatform.field_type.parameter_provider, alias: ezobjectrelation}

    ezpublish.fieldType.ezobjectrelationlist.parameterProvider:
        class: eZ\Publish\Core\MVC\Symfony\FieldType\RelationList\ParameterProvider
        arguments:
            - "@ezpublish.api.service.content"
        tags:
            - {name: ezplatform.field_type.parameter_provider, alias: ezobjectrelationlist}

    ezpublish.fieldType.ezimageasset.parameterProvider:
        class: eZ\Publish\Core\MVC\Symfony\FieldType\ImageAsset\ParameterProvider
        lazy: true
        arguments:
            - "@ezpublish.siteaccessaware.repository"
        tags:
            - {name: ezplatform.field_type.parameter_provider, alias: ezimageasset}

    eZ\Publish\Core\MVC\Symfony\FieldType\User\ParameterProvider:
        lazy: true
        arguments:
            - "@ezpublish.api.service.user"
        tags:
            - {name: ezplatform.field_type.parameter_provider, alias: ezuser}

    # Image
    ezpublish.fieldType.ezimage.io_service:
        class: eZ\Publish\Core\FieldType\Image\IO\Legacy
        arguments:
            - "@ezpublish.fieldType.ezimage.io_service.published"
            - "@ezpublish.fieldType.ezimage.io_service.draft"
            - "@ezpublish.fieldType.ezimage.io_service.options_provider"
        # Required by ezpublish.core.io.stream_file_listener. Request listeners are initialized very early.
        lazy: true

    ezpublish.fieldType.ezimage.io_service.options_provider:
        class: eZ\Publish\Core\FieldType\Image\IO\OptionsProvider
        calls:
            - [ setVarDir, [ "$var_dir$" ] ]
            - [ setStorageDir, [ "$storage_dir$" ] ]
            - [ setDraftImagesDir, [ "$image.versioned_images_dir$" ] ]
            - [ setPublishedImagesDir, [ "$image.published_images_dir$" ] ]

    # Image alias generator
    ezpublish.fieldType.ezimage.variation_service:
        alias: ezpublish.image_alias.imagine.cache.alias_generator_decorator

    ezpublish.fieldType.ezimage.io_service.published:
        parent: ezpublish.core.io.service
        calls:
            - [ setPrefix, [ "$image.published_images_dir$" ] ]

    ezpublish.fieldType.ezimage.io_service.draft:
        parent: ezpublish.core.io.service
        calls:
            - [ setPrefix, [ "$image.versioned_images_dir$" ] ]

    ezpublish.fieldType.ezimage.pathGenerator:
        class: eZ\Publish\Core\FieldType\Image\PathGenerator\LegacyPathGenerator

    # BinaryFile
    ezpublish.fieldType.ezbinaryfile.io_service:
        parent: ezpublish.core.io.service
        calls:
            - [ setPrefix, [ "$binary_dir$" ] ]

    ezpublish.fieldType.ezbinaryfile.pathGenerator:
        class: eZ\Publish\Core\FieldType\BinaryBase\PathGenerator\LegacyPathGenerator

    # Will be added to binaryfile & mediafile external storage handlers by a compiler pass
    ezpublish.fieldType.ezbinarybase.download_url_generator:
        public: true # @todo should be private
        class: eZ\Publish\Core\MVC\Symfony\FieldType\BinaryBase\ContentDownloadUrlGenerator
        arguments: ["@router"]

    # Symfony 3.4+ service definitions:
    eZ\Publish\Core\FieldType\ImageAsset\AssetMapper:
        lazy: true
        arguments:
            $contentService: '@ezpublish.api.service.content'
            $locationService: '@ezpublish.api.service.location'
            $contentTypeService: '@ezpublish.api.service.content_type'
            $mappings: '$fieldtypes.ezimageasset.mappings$'
